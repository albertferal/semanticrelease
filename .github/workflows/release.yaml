name: Build-Publish-Docker-Image

# on:
#   push:
#     tags:
#       - 'v*'


# on:
#   workflow_run:
#     workflows: [Test]
#     types: [completed]
#     branches: [semantic-release]

on:
  pull_request:
    branches:
      - 'master'
  push:
    branches:
      - 'master'

permissions:
  contents: write
  packages: write

env:
  REGISTRY: ghcr.io

jobs:
  semantic-release:
    # if: "${{ github.event.workflow_run.conclusion == 'success' && !contains(github.event.commits[0].message, 'chore(release):') }}"
    name: Semantic Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Unshallow
        run: git fetch --prune --unshallow

      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Create empty semantic_release_version.txt file
        run: touch semantic_release_version.txt

      - name: Release
        id: semantic_release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: npx semantic-release --debug

      - name: Get the version
        id: get_version
        run: |
          echo VERSION=$(cat semantic_release_version.txt) >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login in GHCR
        uses: docker/login-action@v3
        id: configure-login-ghcr
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Login to Docker Hub registry
        uses: docker/login-action@v3
        id: configure-login-dockerhub
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and Push on DockerHub
        if: ${{ env.VERSION != '' }}
        run: make docker-buildx
        env:
          VERSION: ${{ env.VERSION }}

    outputs:
      version: ${{ env.VERSION }}